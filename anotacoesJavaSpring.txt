Spring boot 

- Spring boot é um projeto da Spring que visa facilitar a criação de aplicações Java.
- Spring boot é uma forma de simplificar a configuração de aplicações Spring.

Spring initializr (https://start.spring.io/)
- O Spring initializr é uma ferramenta online que permite a criação de projetos Spring boot.
- O Spring initializr permite a configuração de dependências e a geração de um projeto Spring boot.

----------------------------------------------------------------

- As dependências do Spring boot são gerenciadas pelo Maven ou Gradle. E o Spring boot utiliza o Tomcat como servidor de aplicação padrão. O Tomcat é um servidor web que suporta aplicações Java. 

- Algumas dependências existentes no Spring boot: 
    => Lombok: Biblioteca que permite a geração de código boilerplate. Facilita a criação de classes Java. 
    => Spring Boot DevTools: Ferramenta que permite o desenvolvimento de aplicações Spring boot de forma mais rápida. 
    => Spring Web: Dependência que permite a criação de aplicações web com o Spring boot. Incluido o Spring MVC. E RESTful web services. 
    => Spring Data JPA: Dependência que permite a integração do Spring boot com o JPA. JPA é uma especificação que permite a persistência de dados em Java.

 ---------------------------------------------------------------
 Padrão MVC

- O padrão MVC é um padrão de arquitetura de software que separa a aplicação em três componentes principais: Model, View e Controller.
    => Model: Representa a camada de modelo da aplicação
     => É no Model que fica as classes que representam os dados da aplicação.
    => View: Representa a camada de visualização da aplicação.
        => No caso de aplicações web, a View é a página HTML que é exibida para o usuário.
                => No caso de aplicações RESTful, a View é o JSON que é retornado para o usuário.
                => No caso de aplicações desktop, a View é a Interface gráfica que é exibida para o usuário.
                => No caso de aplicações mobile, a View é a tela que é exibida para o usuário.
                => No caso de aplicações console, a View é a saída que é exibida para o usuário.

    => Controller: Representa a camada de controle da aplicação.
        => O Controller é responsável por receber as requisições do usuário e chamar a lógica de negócio da aplicação.
        => O Controller é responsável por retornar a resposta para o usuário.
        => O Controller é responsável por chamar a View para exibir a resposta para o usuário.

    => O Controller é responsável por chamar o Service para executar a lógica de negócio da aplicação.

    => O Controller é responsável por chamar o Repository para acessar os dados da aplicação.
        => O Controller é responsável por chamar o Model para representar os dados da aplicação.
        => O Controller é responsável por chamar o DTO para representar os dados da aplicação.

        => Quando criamos a classe Controller, devemos anotá-la com a anotação @RestController.
            => A anotação @RestController indica que a classe é um Controller RESTful.
            => A anotação @RestController é uma combinação das anotações @Controller e @ResponseBody.
            => A anotação @Controller indica que a classe é um Controller.
            => A anotação @ResponseBody indica que o retorno do método deve ser serializado e retornado como resposta HTTP.
            => Quando criamos um método no Controller, devemos anotá-lo com a anotação @RequestMapping.
            => A anotação @RequestMapping indica que o método é um endpoint RESTful.
            => A anotação @RequestMapping é uma combinação das anotações @GetMapping, @PostMapping, @PutMapping e @DeleteMapping.
                => A anotação @GetMapping indica que o método é um endpoint RESTful do tipo GET.
                    => O GET é um método HTTP que é utilizado para recuperar informações do servidor.
                => A anotação @PostMapping indica que o método é um endpoint RESTful do tipo POST.
                    => O POST é um método HTTP que é utilizado para enviar informações para o servidor.
                => A anotação @PutMapping indica que o método é um endpoint RESTful do tipo PUT.
                    => O PUT é um método HTTP que é utilizado para atualizar informações no servidor.
                => A anotação @DeleteMapping indica que o método é um endpoint RESTful do tipo DELETE.
                    => O DELETE é um método HTTP que é utilizado para excluir informações do servidor.

    => O Service é uma camada que contém a lógica de negócio da aplicação.
    => O Repository é uma camada que contém a lógica de acesso a dados da aplicação. 
        => O Repository é responsável por realizar operações de CRUD (Create, Read, Update, Delete) no banco de dados.
    => O DTO é uma camada que contém a representação dos dados da aplicação.

- Logo a estrutura de um projeto Spring boot é: 
    => Controller: Camada responsável por receber as requisições do usuário e chamar a lógica de negócio da aplicação.
    => Service: Camada responsável por conter a lógica de negócio da aplicação.
    => Repository: Camada responsável por conter a lógica de acesso a dados da aplicação.
    => DTO: Camada responsável por conter a representação dos dados da aplicação.
        => Normalmente, pode se usar Record do java para criar o DTO. Record é uma classe imutável que contém atributos e métodos getters.

 ---------------------------------------------------------------

 Lombok

- O Lombok permite a criação de classes Java de forma mais simples e rápida.
    => @Configuration: A anotação @Configuration é utilizada para indicar que a classe é uma classe de configuração.
    => @Bean: A anotação @Bean é utilizada para indicar que o método é um bean do Spring. O bean é um objeto que é gerenciado pelo Spring. 
    => @Autowired: A anotação @Autowired é utilizada para injetar uma dependência no Spring.
    => @Data: A anotação @Data é utilizada para gerar os métodos getters, setters, equals, hashCode e toString.
    => @NoArgsConstructor: A anotação @NoArgsConstructor é utilizada para gerar um construtor sem argumentos.
    => @AllArgsConstructor: A anotação @AllArgsConstructor é utilizada para gerar um construtor com todos os argumentos.
    => @Builder: A anotação @Builder é utilizada para gerar um padrão de projeto Builder.
    => @Entity: A anotação @Entity é utilizada para indicar que a classe é uma entidade JPA.
    => @Table: A anotação @Table é utilizada para indicar o nome da tabela no banco de dados.
    => @Id: A anotação @Id é utilizada para indicar que o atributo é uma chave primária.
    => @GeneratedValue: A anotação @GeneratedValue é utilizada para indicar que o valor do atributo é gerado automaticamente.  
    => @Column: A anotação @Column é utilizada para indicar o nome da coluna no banco de dados.
    => @Service: A anotação @Service é utilizada para indicar que a classe é um Service.
    => @Repository: A anotação @Repository é utilizada para indicar que a classe é um Repository.
    => @RestController: A anotação @RestController é utilizada para indicar que a classe é um Controller RESTful.
    => @RequestParam: A anotação @RequestParam é utilizada para indicar que o parâmetro é um parâmetro da URL.
    => @RequestMapping: A anotação @RequestMapping é utilizada para indicar que o método é um endpoint RESTful.
    => @GetMapping: A anotação @GetMapping é utilizada para indicar que o método é um endpoint RESTful do tipo GET.
    => @PostMapping: A anotação @PostMapping é utilizada para indicar que o método é um endpoint RESTful do tipo POST.
    => @PutMapping: A anotação @PutMapping é utilizada para indicar que o método é um endpoint RESTful do tipo PUT.
    => @DeleteMapping: A anotação @DeleteMapping é utilizada para indicar que o método é um endpoint RESTful do tipo DELETE.
    => @PathVariable: A anotação @PathVariable é utilizada para indicar que o parâmetro é um parâmetro da URL.

 ---------------------------------------------------------------

 Banco de Dados no Spring boot

- O Spring boot permite a integração com diversos bancos de dados.
- Para criar uma aplicação Spring boot com banco de dados, é necessário adicionar a dependência do banco de dados no arquivo pom.xml. Como exemplo, a dependência do banco de dados H2, PostgreeSQL e MySQL. 
- Após aplicar as dependências, é necessário configurar o banco de dados no arquivo application.properties. Por exemplo, a configuração do banco de dados H2, PostgreeSQL e MySQL. Colocando a url do banco de dados, o usuário e a senha.
- Quando criar as classes de entidade, é necessário anotá-las com a anotação @Entity. A anotação @Entity é utilizada para indicar que é uma tabela do banco de dados.
- Quando criar as classes de entidade, é necessário anotá-las com a anotação @Table. A anotação @Table é utilizada para indicar o nome da tabela no banco de dados.
- Quando criar os atributos das classes de entidade, é necessário anotá-los com algumas anotações A anotação @Id é utilizada para indicar que o atributo é uma chave primária. Com o id, pode adicionar a anotação @GeneratedValue para indicar que o valor do atributo é gerado automaticamente.
- Após isso, é necessário criar o Repository. O Repository é uma Interface que estende a Interface JpaRepository. A Interface JpaRepository é uma Interface do Spring Data JPA que contém métodos para realizar operações de CRUD (Create, Read, Update, Delete) no banco de dados.
- Após isso, é possível criar os scripts do banco de dados, como o script de criação da tabela e o script de inserção de dados. Para isso, é necessário criar um arquivo data.sql e schema.sql na pasta resources. Criar o nome db.migration e criar um arquivo V1__create_table.sql. 
- As anotações para criar os script são o numero da versão, o nome do script e o comando SQL. Exemplos: V1__create_table.sql e V2__insert_data.sql.


 ---------------------------------------------------------------

 OBSERVAÇÕES GERAIS:

- RESTful é um estilo de arquitetura de software que define um conjunto de restrições a serem usadas para a criação de web services. 

- O RESTful é baseado no protocolo HTTP e utiliza os métodos HTTP para realizar operações nos recursos.

- O Tomcat utiliza da porta 8080 para rodar a aplicação. Caso a porta esteja ocupada, o Tomcat irá utilizar a próxima porta disponível. Caso o programador queira mudar a porta padrão, ele pode fazer isso no arquivo application.properties. Exemplo: server.port=8081 (Basta ir no arquivo application.properties e adicionar essa linha).

-  O application.properties é um arquivo de configuração do Spring boot que permite a configuração de propriedades da aplicação. 
    => O que pode ser configurado no application.properties: 
        => Configurações do servidor Tomcat.
        => Configurações do banco de dados.
        => Configurações de segurança.
        => Configurações de internacionalização.
        => Configurações de logging.
        => Configurações de cache.
        => Configurações de mensagens.
        => Configurações de propriedades customizadas.

- É póssivel criar outro arquivo de configuração, chamado application-dev.properties, para configurar propriedades específicas para o ambiente de desenvolvimento. Para isso, basta criar o arquivo application-dev.properties e adicionar as propriedades específicas para o ambiente de desenvolvimento. Com esse arquivo criado é necessário adicionar a seguinte linha no arquivo application.properties: spring.profiles.active=dev. 

